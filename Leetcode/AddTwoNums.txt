========
Add Two Numbers
"You are given two non-empty linked lists representing two non-negative integers.
The digits are stored in reverse order and each of their nodes contain a single digit.
Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself
Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.
"
Will the lists be the same size? For the solution I'm thinkging of, I don't think it matters

So my initial thought is to find the length the lists, raise first numbers by power of length of list
Potential problem: You start with _list nodes_, not the list object, which means length of list indeterminate at start

First solution: Two arrays with values from lists. 2(O(n))
Second: One array with tuple values, which would be multiplied by something. 

Sol1 work:
Note: Return numbers in reverse order as a linked list
Problem: Different length linked lists, means determining values individually
	check: is len(list) negligible / O(1)? Yes: https://wiki.python.org/moin/TimeComplexity
	
Initializing empty list of length:
givenarr = [None] * n
	
Range review params rq:
>>> # Two parameters
>>> for i in range(3, 6):
...     print(i)
... 
3
4
5
>>> # Three parameters
>>> for i in range(4, 10, 2):
...     print(i)
... 
4
6
8
>>> # Going backwards
>>> for i in range(0, -10, -2):
...     print(i)

	
==============
	
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        
        arr1 = []
        arr2 = []
        
        while l1 is not None:
            arr1.append(l1.val)
            l1 = l1.next
            
        while l2 is not None:
            arr2.append(l2.val)
            l2 = l2.next
            
        
        # Check which of the two arrays is longer
        # Acknowledge lack of check for equality; that could save time
        if len(arr1) > len(arr2):
            longer = arr1
            shorter = arr2
            lenlonger = len(arr1)
            lenshorter = len(arr2)
        else:
            longer = arr2
            shorter = arr1
            lenlonger = len(arr2)
            lenshorter = len(arr1)
        
        for i in range(lenshorter):
            shorter[i] = shorter[i] * 10**i
        
        for i in range(lenlonger):
            longer[i] = longer[i] * 10**i
            
            if i == 0:
                result = ListNode(longer[i] + shorter[i])
                resulthead = result
            
            # Add together. Longer > shorter, only adds longer value to linked list
            try:
                result.next = ListNode(longer[i] + shorter[i])
            except IndexError:
                result.next = ListNode(longer[i])
            
            result = result.next
        
            
        return resulthead
==================       
#Lol oops, just need the raw numbers! Since returning linked list. Don't need real values.
# Also, implements correct head and CARRY! Remember, single digit!

       ....

        result = ListNode(arr1[0] + arr2[0])    
        carry = 0
            
        for i in range(lenlonger):
            
            # Add together.
            try:
                sum = longer[i] + shorter[i] + carry
                if sum >= 10
                    result.next = ListNode(sum-10)
                    carry = 1
                else:
                    result.next = ListNode(longer[i] + shorter[i])
                    carry = 0
            
            #If longer > shorter, will eventually be index out of bounds. Only add longer val
            except IndexError:
                result.next = ListNode(longer[i])
            
            if i==0:
                resulthead = result
            
            result = result.next
        
            
        return resulthead
        
		
#.... wait. These are in REVERSE order. Carry doesn't work if trying to work directly with linked list result
# shiiit. Will have to order through again. Arr3 time
# Conceivable alternative: Hash map with value 0/1. Array seems simpler and have to access linked list linearly anyway
  ....
        
        resultarr = [0] * lenlonger
        carryarr = [0] * lenlonger
        #Strictly speaking, carryarr only has to be lenshorter+1
        
        for i in range(lenlonger):
            # Add together.
            try:
                # Check if carry necessary
                sum = longer[i] + shorter[i] + carryarr[i]
                if sum >= 10:
                    carryarr[i+1] = 1
                    resultarr[i] = sum - 10
                else:
                    resultarr[i] = sum
                    
            #If longer > shorter, will eventually be index out of bounds. Only add longer value, then
            except IndexError:
                resultarr[i] = longer[i] + carryarr[i]
        
        # Create first node of result linked list, then fill out
        result = ListNode(resultarr[0])
        
        for i in range(1,lenlonger):
            result.next = ListNode(resultarr[i])
            if i==1:
                resulthead = result
            result = result.next
        
            
        return resulthead
# Failure condition: Length of list; 1 element. OOPS.
        ...
        # Create first node of result linked list, then fill out
        result = ListNode(resultarr[0])
        
        if lenlonger > 1:
            for i in range(1,lenlonger):
                result.next = ListNode(resultarr[i])
                if i==1:
                    resulthead = result
                result = result.next
        else:
            return result
            
        return resulthead                
        
# Failure condition: Input [5], [5] should return [0,1]. 
# In other words: If carry of last term is 1, should add lenghth + 1 to total
# Why that fails: prior try-catch loop fails when both same length! i+1 becomes oob. Add sameness check earlier
 
...
    
        lencarry = (lenshorter+1)

        resultarr = [0] * lenlonger
        carryarr = [0] * lencarry
        
        for i in range(lenlonger):
            # Add together.
            try:
            # Check if carry necessary
                sum = longer[i] + shorter[i] + carryarr[i]
                if sum >= 10:
                    carryarr[i+1] = 1
                    resultarr[i] = sum - 10
                else:
                    resultarr[i] = sum    
            #If longer > shorter, will eventually be index out of bounds. Only add longer value, then
            except IndexError:
                resultarr[i] = longer[i] + carryarr[i]
            
        #Check to see if carry needs to expand array
        if carryarr[lencarry-1] == 1:
            if sameness==1:
                resultarr.append(1)
        lenresult = len(resultarr)
        
        # Create first node of result linked list, then fills in subsequent loop. Checks for len 1 failure
        result = ListNode(resultarr[0])
        if lenresult > 1:
            for i in range(1,lenresult):
                result.next = ListNode(resultarr[i])
                if i==1:
                    resulthead = result
                result = result.next
        else:
            return result
            
        return resulthead
        
                
#New failure condition: [1], [9,9]. Should give [0,0,1].
#... omg. I fucking forgot to put the carry check in the event of an index error.

============
Final

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        
        arr1 = []
        arr2 = []
        
        while l1 is not None:
            arr1.append(l1.val)
            l1 = l1.next
            
        while l2 is not None:
            arr2.append(l2.val)
            l2 = l2.next
            
        
        # Check which of the two arrays is longer
        sameness = 0
        
        if len(arr1) >= len(arr2):
            longer = arr1
            shorter = arr2
            lenlonger = len(arr1)
            lenshorter = len(arr2)
            if len(arr1) == len(arr2):
                sameness = 1
        else:
            longer = arr2
            shorter = arr1
            lenlonger = len(arr2)
            lenshorter = len(arr1)
    
        lencarry = (lenlonger+1)
        #Can technically be lenshorter+1? But eh
        
        resultarr = [0] * lenlonger
        carryarr = [0] * lencarry
        
        for i in range(len(resultarr)):
            # Add together.
            try:
            # Check if carry necessary
                sum = longer[i] + shorter[i] + carryarr[i]
                if sum >= 10:
                    carryarr[i+1] = 1
                    resultarr[i] = sum - 10
                else:
                    resultarr[i] = sum    
            #If longer > shorter, will eventually be index out of bounds. Only add longer value, then
            except IndexError:
                sum = longer[i] + carryarr[i]
                if sum >= 10:
                    carryarr[i+1] = 1
                    resultarr[i] = sum - 10
                else:
                    resultarr[i] = sum    
                
            #Check to see if carry needs to expand array
            lastcarry = (len(carryarr)-1)
            if carryarr[lastcarry] == 1:
                resultarr.append(1) 
                carryarr.append(0)
        
        lenresult = len(resultarr)
        
        # Create first node of result linked list, then fills in subsequent loop. Checks for len 1 failure
        result = ListNode(resultarr[0])
        if lenresult > 1:
            for i in range(1,lenresult):
                result.next = ListNode(resultarr[i])
                if i==1:
                    resulthead = result
                result = result.next
        else:
            return result
            
        return resulthead
        
                
        
        
            
        
        